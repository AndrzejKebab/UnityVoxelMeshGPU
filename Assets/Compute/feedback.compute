#pragma kernel CSMain
#include "voxels.hlsl"

RWStructuredBuffer<int> uVoxels;
RWStructuredBuffer<uint> uIndirectArgs;
RWStructuredBuffer<GeometryData> uFeedback;
RWStructuredBuffer<ChunkFeedback> uChunkFeedback;

groupshared uint sVertexCount;
groupshared uint sIndexCount;

groupshared int3 Normals[] =
{
    int3(0, 0, -1),
    int3(0, 0, 1),
    int3(0, 1, 0),
    int3(0, -1, 0),
    int3(-1, 0, 0),
    int3(1, 0, 0)
};

bool hasVoxel(int3 coord) {
    if (coord.x < 0 || coord.x >= CHUNK_SIZE || 
        coord.y < 0 || coord.y >= CHUNK_SIZE ||
        coord.z < 0 || coord.z >= CHUNK_SIZE) {
        return false;
    }

    int idx = to1D(coord);
    return uVoxels[idx] > 0;
}

[numthreads(8, 8, 8)]
void CSMain (uint3 dispatchID : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)
{
    if (groupThreadID.x == 0 && groupThreadID.y == 0 && groupThreadID.z == 0) {
        sVertexCount = 0;
        sIndexCount = 0;
    }

    AllMemoryBarrierWithGroupSync();
    
    uint globalVoxelIndex = to1D(dispatchID);

    if (uVoxels[globalVoxelIndex] > 0) {
        int3 coord = int3(dispatchID);

        uint vertexCount = 0;
        uint indexCount = 0;

        for (int i = 0; i < 6; i++)
        {
            int3 neighborCoord = coord + Normals[i];
            if (!hasVoxel(neighborCoord)) 
            {
                vertexCount += 4;
                indexCount += 6;
            }
        }
        
        InterlockedAdd(sVertexCount, vertexCount);
        InterlockedAdd(sIndexCount, indexCount);
    }

    AllMemoryBarrierWithGroupSync();

    if (groupThreadID.x == 0 && groupThreadID.y == 0 && groupThreadID.z == 0)
    {
        uint vertexOffset = 0, indexOffset = 0;
        
        InterlockedAdd(uFeedback[0].vertexCount, sVertexCount, vertexOffset);
        InterlockedAdd(uFeedback[0].indexCount, sIndexCount, indexOffset);
        
        uint index = groupID.x + 10 * (groupID.y + 10 * groupID.z);

        uChunkFeedback[index].vertexOffset = vertexOffset;
        uChunkFeedback[index].vertexCount = sVertexCount;
        uChunkFeedback[index].indexOffset = indexOffset;
        uChunkFeedback[index].indexCount = sIndexCount;

        uIndirectArgs[0] = uFeedback[0].indexCount;
    }
}