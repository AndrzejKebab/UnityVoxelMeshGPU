#pragma kernel CSMain
#include "voxels.hlsl"

RWStructuredBuffer<Vertex> uVertices;
RWStructuredBuffer<uint> uIndices;
StructuredBuffer<int> uVoxels;
StructuredBuffer<ChunkFeedback> uChunkFeedback;

groupshared uint sVertexOffset;
groupshared uint sVertexCount;
groupshared uint sIndexOffset;
groupshared uint sIndexCount;
groupshared uint sChunkIndex;

bool hasVoxel(int3 coord) {
    if (coord.x < 0 || coord.x >= CHUNK_SIZE || 
        coord.y < 0 || coord.y >= CHUNK_SIZE ||
        coord.z < 0 || coord.z >= CHUNK_SIZE) {
        return false;
    }

    int idx = to1D(coord);
    return uVoxels[idx] > 0;
}

void setVertex(out Vertex vertex, in float3 position, in float2 texcoord, in float3 normal) {
    vertex.position = position;
    vertex.texcoord = texcoord;
    vertex.normal = normal;
}

[numthreads(8, 8, 8)]
void CSMain (uint3 dispatchID : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)
{
    if (groupThreadID.x == 0 && groupThreadID.y == 0 && groupThreadID.z == 0) {
        sChunkIndex = groupID.x + 10 * (groupID.y + 10 * groupID.z);
        sVertexOffset = uChunkFeedback[sChunkIndex].vertexOffset;
        sIndexOffset = uChunkFeedback[sChunkIndex].indexOffset;
        sVertexCount = uChunkFeedback[sChunkIndex].vertexCount;
        sIndexCount = uChunkFeedback[sChunkIndex].indexCount;
    }

    AllMemoryBarrierWithGroupSync();
    
    uint globalVoxelIndex = to1D(dispatchID);

    if (uVoxels[globalVoxelIndex] > 0)
    {
        int3 coord = int3(dispatchID);
        float3 position = float3(coord);

        uint vertexOffset = 0, indexOffset = 0;

        // +X
        if (!hasVoxel(coord + int3(1, 0, 0))) {
            InterlockedAdd(sVertexOffset, 4, vertexOffset);
            InterlockedAdd(sIndexOffset, 6, indexOffset);

            setVertex(uVertices[vertexOffset + 0], position + float3(0.5, 0.5, 0.5), float2(0.0, 0.0), float3(1.0, 0.0, 0.0));
            setVertex(uVertices[vertexOffset + 1], position + float3(0.5, -0.5, 0.5), float2(0.0, 1.0), float3(1.0, 0.0, 0.0));
            setVertex(uVertices[vertexOffset + 2], position + float3(0.5, -0.5, -0.5), float2(1.0, 1.0), float3(1.0, 0.0, 0.0));
            setVertex(uVertices[vertexOffset + 3], position + float3(0.5, 0.5, -0.5), float2(1.0, 0.0), float3(1.0, 0.0, 0.0));

            uIndices[indexOffset + 0] = vertexOffset;
            uIndices[indexOffset + 1] = vertexOffset + 1;
            uIndices[indexOffset + 2] = vertexOffset + 2;

            uIndices[indexOffset + 3] = vertexOffset + 2;
            uIndices[indexOffset + 4] = vertexOffset + 3;
            uIndices[indexOffset + 5] = vertexOffset;
        }

        // -X
        if (!hasVoxel(coord + int3(-1, 0, 0))) {
            InterlockedAdd(sVertexOffset, 4, vertexOffset);
            InterlockedAdd(sIndexOffset, 6, indexOffset);

            setVertex(uVertices[vertexOffset + 0], position + float3(-0.5, 0.5, -0.5), float2(0.0, 0.0), float3(-1.0, 0.0, 0.0));
            setVertex(uVertices[vertexOffset + 1], position + float3(-0.5, -0.5, -0.5), float2(0.0, 1.0), float3(-1.0, 0.0, 0.0));
            setVertex(uVertices[vertexOffset + 2], position + float3(-0.5, -0.5, 0.5), float2(1.0, 1.0), float3(-1.0, 0.0, 0.0));
            setVertex(uVertices[vertexOffset + 3], position + float3(-0.5, 0.5, 0.5), float2(1.0, 0.0), float3(-1.0, 0.0, 0.0));

            uIndices[indexOffset + 0] = vertexOffset;
            uIndices[indexOffset + 1] = vertexOffset + 1;
            uIndices[indexOffset + 2] = vertexOffset + 2;

            uIndices[indexOffset + 3] = vertexOffset + 2;
            uIndices[indexOffset + 4] = vertexOffset + 3;
            uIndices[indexOffset + 5] = vertexOffset;
        }

        // +Y
        if (!hasVoxel(coord + int3(0, 1, 0))) {
            InterlockedAdd(sVertexOffset, 4, vertexOffset);
            InterlockedAdd(sIndexOffset, 6, indexOffset);

            setVertex(uVertices[vertexOffset + 0], position + float3(-0.5, 0.5, -0.5), float2(0.0, 0.0), float3(0.0, 1.0, 0.0));
            setVertex(uVertices[vertexOffset + 1], position + float3(-0.5, 0.5, 0.5), float2(0.0, 1.0), float3(0.0, 1.0, 0.0));
            setVertex(uVertices[vertexOffset + 2], position + float3(0.5, 0.5, 0.5), float2(1.0, 1.0), float3(0.0, 1.0, 0.0));
            setVertex(uVertices[vertexOffset + 3], position + float3(0.5, 0.5, -0.5), float2(1.0, 0.0), float3(0.0, 1.0, 0.0));

            uIndices[indexOffset + 0] = vertexOffset;
            uIndices[indexOffset + 1] = vertexOffset + 1;
            uIndices[indexOffset + 2] = vertexOffset + 2;

            uIndices[indexOffset + 3] = vertexOffset + 2;
            uIndices[indexOffset + 4] = vertexOffset + 3;
            uIndices[indexOffset + 5] = vertexOffset;
        }

        // -Y
        if (!hasVoxel(coord + int3(0, -1, 0))) {
            InterlockedAdd(sVertexOffset, 4, vertexOffset);
            InterlockedAdd(sIndexOffset, 6, indexOffset);

            setVertex(uVertices[vertexOffset + 0], position + float3(-0.5, -0.5, 0.5), float2(0.0, 0.0), float3(0.0, -1.0, 0.0));
            setVertex(uVertices[vertexOffset + 1], position + float3(-0.5, -0.5, -0.5), float2(0.0, 1.0), float3(0.0, -1.0, 0.0));
            setVertex(uVertices[vertexOffset + 2], position + float3(0.5, -0.5, -0.5), float2(1.0, 1.0), float3(0.0, -1.0, 0.0));
            setVertex(uVertices[vertexOffset + 3], position + float3(0.5, -0.5, 0.5), float2(1.0, 0.0), float3(0.0, -1.0, 0.0));

            uIndices[indexOffset + 0] = vertexOffset;
            uIndices[indexOffset + 1] = vertexOffset + 1;
            uIndices[indexOffset + 2] = vertexOffset + 2;

            uIndices[indexOffset + 3] = vertexOffset + 2;
            uIndices[indexOffset + 4] = vertexOffset + 3;
            uIndices[indexOffset + 5] = vertexOffset;
        }

        // +Z
        if (!hasVoxel(coord + int3(0, 0, 1))) {
            InterlockedAdd(sVertexOffset, 4, vertexOffset);
            InterlockedAdd(sIndexOffset, 6, indexOffset);

            setVertex(uVertices[vertexOffset + 0], position + float3(-0.5, 0.5, 0.5), float2(0.0, 0.0), float3(0.0, 0.0, 1.0));
            setVertex(uVertices[vertexOffset + 1], position + float3(-0.5, -0.5, 0.5), float2(0.0, 1.0), float3(0.0, 0.0, 1.0));
            setVertex(uVertices[vertexOffset + 2], position + float3(0.5, -0.5, 0.5), float2(1.0, 1.0), float3(0.0, 0.0, 1.0));
            setVertex(uVertices[vertexOffset + 3], position + float3(0.5, 0.5, 0.5), float2(1.0, 0.0), float3(0.0, 0.0, 1.0));

            uIndices[indexOffset + 0] = vertexOffset;
            uIndices[indexOffset + 1] = vertexOffset + 1;
            uIndices[indexOffset + 2] = vertexOffset + 2;

            uIndices[indexOffset + 3] = vertexOffset + 2;
            uIndices[indexOffset + 4] = vertexOffset + 3;
            uIndices[indexOffset + 5] = vertexOffset;
        }

        // -Z
        if (!hasVoxel(coord + int3(0, 0, -1))) {
            InterlockedAdd(sVertexOffset, 4, vertexOffset);
            InterlockedAdd(sIndexOffset, 6, indexOffset);

            setVertex(uVertices[vertexOffset + 0], position + float3(0.5, 0.5, -0.5), float2(0.0, 0.0), float3(0.0, 0.0, -1.0));
            setVertex(uVertices[vertexOffset + 1], position + float3(0.5, -0.5, -0.5), float2(0.0, 1.0), float3(0.0, 0.0, -1.0));
            setVertex(uVertices[vertexOffset + 2], position + float3(-0.5, -0.5, -0.5), float2(1.0, 1.0), float3(0.0, 0.0, -1.0));
            setVertex(uVertices[vertexOffset + 3], position + float3(-0.5, 0.5, -0.5), float2(1.0, 0.0), float3(0.0, 0.0, -1.0));

            uIndices[indexOffset + 0] = vertexOffset;
            uIndices[indexOffset + 1] = vertexOffset + 1;
            uIndices[indexOffset + 2] = vertexOffset + 2;

            uIndices[indexOffset + 3] = vertexOffset + 2;
            uIndices[indexOffset + 4] = vertexOffset + 3;
            uIndices[indexOffset + 5] = vertexOffset;
        }
    }
}